---
// Icon component
import { Icon, Logo } from '@components'

// Icons
import { FiGithub, FiInstagram, FiLinkedin } from 'react-icons/fi'
import { FaDiscord } from 'react-icons/fa'
import { LiaSpotify } from 'react-icons/lia'
import { FaXTwitter, FaThreads } from 'react-icons/fa6'

// Types
import type { IconProps } from '@types'

const socials: IconProps[] = [
  {
    icon: FiGithub,
    href: 'https://github.com/Red-CS/'
  },
  {
    icon: LiaSpotify,
    href: 'https://open.spotify.com/user/jpw918?si=9641a1c3c57b4e04',
    style: {
      transform: 'scale(1.4)' // Spotify logo is weird for whatever reason
    }
  },
  {
    icon: FiInstagram,
    href: 'https://www.instagram.com/red.williams18/'
  },
  {
    icon: FiLinkedin,
    href: 'https://www.linkedin.com/in/redwilliams18/'
  },
  {
    icon: FaXTwitter,
    href: 'https://twitter.com/redpw_'
  },
  {
    icon: FaDiscord,
    href: ''
  },
  {
    icon: FaThreads,
    href: 'https://www.threads.net/@red.williams18'
  }
]

const email = 'redpwilliams@gmail.com'

const navHeaders: { name: string; href: string }[] = [
  { name: 'Home', href: '/' },
  { name: 'Projects', href: '/projects' },
  { name: 'Reports', href: '/reports' },
  { name: 'Resume', href: '/resume' }
]

const isSubpath = (currentUrl: string, basePath: string): boolean => {
  if (currentUrl === basePath) return true
  if (basePath === '/') return false
  return currentUrl.startsWith(basePath)
}

interface Props {
  title: string
}

const { title } = Astro.props
---

<!doctype html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='Astro description' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />
    <title>{title}</title>
    <link rel='preconnect' href='https://fonts.googleapis.com' />
    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
    <link
      href='https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;500;600;700&display=swap'
      rel='stylesheet'
    />
    <link
      rel='stylesheet'
      href='https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap'
    />
  </head>
  <body>
    <div class='main-container'>
      <aside class='socials'>
        <ul>
          {
            socials.map((social) => (
              <li style='scale: 1.3; line-height: 0'>
                <Icon href={social.href} translateOnHover>
                  <social.icon className='icon' style={social.style} />
                </Icon>
              </li>
            ))
          }
        </ul>
      </aside>
      <nav class='main-nav'>
        <ul>
          {
            navHeaders.map((header) => (
              <li>
                <a
                  href={header.href}
                  style={{
                    color: isSubpath(Astro.url.pathname, header.href) ? 'var(--text-main)' : ''
                  }}>
                  {header.name}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
      <slot />
      <aside class='email'><div><a>{email}</a></div></aside>
    </div>
    <footer>
      <Logo />
      <p>Stay Connected</p>
      <hr />
      <div class='footer-api-wrapper'>
        <span class='api-span spotify-api'>
          <span></span>
          <span></span>
          <span></span>
          <p class='spotify-listening-to'>
            <a
              id='spotify-vibing'
              href='https://open.spotify.com/user/jpw918?si=9641a1c3c57b4e04'
              target='_blank'>Currently vibing to —&nbsp;</a
            ><a id='spotify-track'></a><span id='spotify-dot-separator'>&nbsp;•&nbsp</span><span
              id='spotify-artists'></span>
          </p>
        </span>
        <span class='api-span datetime'></span>
        <script>
          import type { SpotifyDataFulfilled } from '@types'
          import { setSpotifyUI } from '@util'

          // NOTE - Boolean flag to turn on/off spotify request ping
          const SPOTIFY_REQUEST_FLAG = true

          // Get UI elements
          const spotifyVibing = document.getElementById('spotify-vibing') as HTMLAnchorElement
          const spotifyTrack = document.getElementById('spotify-track') as HTMLAnchorElement
          const spotifyDot = document.getElementById('spotify-dot-separator') as HTMLSpanElement
          const spotifyArtist = document.getElementById('spotify-artists') as HTMLSpanElement

          // Loop to request data from Spotify and populate the UI with
          async function updateSpotifyInfo() {
            try {
              const response = await fetch('/api/spotify')

              // See /api/spotify for defined codes
              if (!response.ok) throw new Error('Bad response of code ' + response.status)

              // Response is good so data shows if spotify is playing or not (null)
              const data: SpotifyDataFulfilled = await response.json()
              if (data === null) throw new Error('Empty data object')

              setSpotifyUI(spotifyTrack, data.track)
              spotifyArtist.innerHTML = ''
              data.artists.forEach((artist, i) => {
                spotifyArtist.insertAdjacentHTML(
                  'beforeend',
                  `<a href='${artist.href}' target='_blank' class='spotify-artist'>${
                    artist.name
                  }</a>${i !== data.artists.length - 1 ? '<pre>, </pre>' : ''}`
                )
              })
            } catch (e) {
              console.log((e as Error).message)

              // Remove inactive elements
              spotifyDot.style.display = 'none'
              spotifyTrack.style.display = 'none'
              spotifyArtist.style.display = 'none'
              spotifyVibing.innerText = 'Offline'
              return
            }
          }

          // Call the function when the DOM content is loaded
          if (spotifyTrack && spotifyArtist && SPOTIFY_REQUEST_FLAG) {
            document.addEventListener('DOMContentLoaded', updateSpotifyInfo)
            setInterval(updateSpotifyInfo, 1000 * 30) // 30 seconds
          }
        </script>
      </div>
    </footer>
  </body>
</html>
<style is:global lang='scss'>
  @use 'src/main' as *;

  :root {
    --text-main: #f4f3f2;
    --text-gray-light: #d3d3d3;
    --text-gray-dark: #a3a3a3;

    --bg-color: #1e1e1e;
    --bg-color-secondary: #171717;

    --gradient-start: rgba(255, 133, 64, 1);
    --gradient-end: rgba(255, 64, 64, 1);
    --gradient: linear-gradient(45deg, var(--gradient-start), var(--gradient-end));

    --aside-width: 6vw;

    --font-sans: Inter, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
      Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    --font-mono: 'Roboto Mono', 'Courier New', Courier, monospace;
  }
  *,
  *::before,
  *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  html {
    height: 100%;
    scroll-behavior: smooth;
    background-color: var(--bg-color-secondary);
  }

  body {
    background-size: cover;
    margin: 0;
    padding: 0;
    font-family: var(--font-sans);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  h2 {
    color: var(--text-main);
    font-size: 1rem;
  }

  h3 {
    color: var(--text-main);
    font-size: 2rem;
    font-weight: 500;
  }

  p {
    color: var(--text-gray-light);
    font-size: 1rem;
    line-height: 1.8;
  }

  a {
    text-decoration: none;
  }

  ul {
    list-style: none;
  }

  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }

  .main-container {
    background-color: var(--bg-color);
    flex-grow: 1;
  }

  aside,
  aside > * {
    display: none;
    color: var(--text-gray-light);
    font-family: var(--font-mono);
  }

  main {
    padding: 0 1em;
  }

  a,
  a:visited {
    color: var(--text-main);
  }

  .main-nav {
    position: fixed;
    width: 90%;
    max-width: 28rem;
    height: 3rem;
    justify-self: center;
    margin: 1rem auto;
    border: 2px solid var(--text-gray-dark);
    background-color: var(--bg-color-secondary);
    border-radius: 8px;
    background-clip: border-box;
    transition: border-color 0.2s ease;
    z-index: 10;
    left: 0;
    right: 0;

    &:hover {
      border-color: var(--text-gray-light);
    }

    ul {
      display: flex;
      align-items: center;
      justify-content: space-around;
      height: 100%;

      a {
        color: var(--text-gray-dark);
        padding: 0.8em;
        transition: color 0.2s ease;
        font-weight: 400;

        &:hover {
          color: var(--text-main);
        }
      }
    }
  }

  @media (min-width: 30em) {
    main {
      padding: 0 2em;
    }
  }

  @media (min-width: $breakpoint-main) {
    body {
      min-height: 100vh;
    }
    main {
      padding: 0 75px;
      min-height: 30vh; // TODO - Use with Footer height variable (30vh as of right now)
      max-width: 1600px;
      margin: 0 auto;
    }

    aside {
      width: var(--aside-width);
      display: block;
      overflow-y: auto;
    }

    %aside-positioned-element {
      display: inline-block;
      position: relative;
    }

    %aside-positioned-element-before {
      content: '';
      display: inline-block;
      width: 0.2vh;
      height: 15vh;
      background-color: var(--text-gray-light);
      vertical-align: middle;
      margin-bottom: 2vh;
    }

    .email {
      left: 0;
      right: auto;
      position: sticky;
      bottom: 0;
      font-size: 1.6vh;

      & > div {
        display: block;
      }

      & > div > a {
        width: 100%;
        line-height: var(--aside-width);
        writing-mode: vertical-rl;
        transform: rotate(180deg);
        @extend %aside-positioned-element;
      }

      & > div > a::before {
        @extend %aside-positioned-element-before;
      }
    }

    .socials {
      position: sticky;
      top: 0;
      float: right;
      display: initial;

      & > ul {
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: start;
        align-items: center;
        flex-wrap: nowrap;

        & > li {
          margin: 1vh 0;
        }
      }

      & > ul::before {
        @extend %aside-positioned-element-before;
      }
    }

    .socials a,
    .socials a:visited {
      color: var(--text-gray-light);
    }
  }

  footer {
    min-height: 30vh;
    width: 100%;
    background-color: var(--bg-color-secondary);

    & > * {
      margin: 0 auto;
      display: block;
      text-align: center;
      text-transform: uppercase;
    }

    & > p {
      font-size: 1.2rem;
      letter-spacing: 4px;
      margin-bottom: 2rem;
      color: var(--text-main);
    }

    hr {
      width: 100%;
    }
  }

  .logo {
    margin: 2rem auto 1rem auto;
    scale: 0.8;
  }

  footer:hover .logo rect,
  footer:focus .logo rect {
    height: 77px;
    &.lower-level {
      height: 90px;
    }
  }

  .footer-api-wrapper {
    display: flex;
    justify-content: space-between;
    margin: 1rem 0;
  }

  .spotify-api {
    display: flex;
    align-items: end;
    font-family: var(--font-sans);
    text-transform: none;

    @keyframes spotify-playing {
      0% {
        height: 3px;
      }
      50% {
        height: 13px;
      }
      to {
        height: 3px;
      }
    }

    & > span {
      width: 3px;
      height: 13px;
      border-radius: 4px;
      background: var(--gradient);
      margin: 0 3px 6px 3px;
      transform-origin: bottom;

      &:nth-child(1) {
        animation: spotify-playing 0.65s infinite linear;
      }

      &:nth-child(2) {
        animation: spotify-playing 0.9s infinite linear;
      }

      &:nth-child(3) {
        animation: spotify-playing 0.75s infinite linear;
      }
    }

    & > p {
      margin-left: 0.5rem;
    }
  }

  .spotify-listening-to {
    font-size: 0.75rem;
    display: flex;
    flex-wrap: wrap;
    & > * {
      display: inline;
    }
  }

  #spotify-artists,
  #spotify-vibing,
  #spotify-dot-separator {
    display: none;
  }

  .spotify-artist:hover,
  .spotify-artist:focus {
    // TODO - Make gradient
    text-decoration: underline 3px red;
  }

  @media (min-width: 30em) {
    // Midsize, display "Currently vibing to" and track name
    #spotify-vibing {
      display: inline;
    }

    #spotify-artists pre {
      display: inline; // This is for the comma separated list
      // Underline only happens under the text, not the comma
    }
  }

  @media (min-width: 60em) {
    // Desktop, display everything
    #spotify-artists,
    #spotify-dot-separator {
      display: inline;
    }
  }
</style>
