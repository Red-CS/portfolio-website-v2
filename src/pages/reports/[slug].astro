---
import { fetchSanityData, formatDate } from '@util'
import type { ReportType } from '@schemas'
import { Layout } from '@layouts'
import { Image } from 'astro:assets'
import { PortableText } from 'astro-portabletext'

// https://github.com/theisel/astro-portabletext/blob/main/astro-portabletext/README.md
import { PTBlock, PTList } from '@components'

const { slug } = Astro.params

// Fetch Sanity data
const query = `*[_type == "report" && slug.current == "${slug}"][0]
{ ..., "image_url": thumbnail.asset->url, "slug": slug.current }`

const data = await fetchSanityData(query)
const report = data.result as unknown as ReportType

// Redirect if invalid URL/report not found
if (!report) return Astro.redirect('/404')

const { day, month, year } = formatDate(report.date_published)
report.date_published = `${month} ${day}, ${year}`

const headers = report.content
  .filter((object) => object.style === 'h1')
  .map((h1) => h1.children[0].text)
---

<Layout title={report.title}>
  <main>
    <h1 class='title'>{report.title}</h1>
    <Image
      class='thumbnail'
      width={300}
      height={300}
      src={report.image_url}
      alt={report.alt_text}
    />
    <div class='metadata'>
      <p>{report.read_time} min read</p>
      <p>{report.date_published}</p>
    </div>
    <div class='article'>
      <nav class='navigation'>
        <div id='div'></div>
        <ul>
          {
            headers.map((h1) => (
              <li class='tab'>
                <a href={'#' + h1}>{h1}</a>
              </li>
            ))
          }
          <script>
            const links = document.querySelectorAll('.tab')
            links.forEach((li) => {
              li.addEventListener('click', () => {
                let pos = window.scrollY
                window.addEventListener('scrollend', function onScroll() {
                  let rect = li.getBoundingClientRect()
                  let height = rect.height
                  let ypos = rect.y
                  document.documentElement.style.setProperty('--tab-pos', ypos + 'px')
                  document.documentElement.style.setProperty('--tab-height', height + 'px')
                  window.removeEventListener('scrollend', onScroll)
                  pos = window.scrollY
                })
                if (pos === window.scrollY) {
                  let rect = li.getBoundingClientRect()
                  let height = rect.height
                  let ypos = rect.y
                  document.documentElement.style.setProperty('--tab-pos', ypos + 'px')
                  document.documentElement.style.setProperty('--tab-height', height + 'px')
                }
              })
            })
          </script>
        </ul>
      </nav>
      <div class='content'>
        <PortableText value={report.content} components={{ block: PTBlock, list: PTList }} />
      </div>
    </div>
  </main>
</Layout>
<style lang='scss'>
  @use 'src/main' as *;

  main {
    margin: 0 5px;
  }

  .title {
    color: var(--text-main);
    max-width: 40rem;
    font-size: clamp(1.75rem, 20%, 3rem);
    margin: 3rem 0;
    line-height: 1.3em;
    font-weight: 600;
  }

  .thumbnail {
    margin: 0 auto;
    display: block;
    height: auto;
    max-width: 100%;
    width: 100%;
    border-radius: 10px;
  }

  .metadata {
    font-family: var(--font-mono);
    color: var(--text-gray-light);
    display: flex;
    justify-content: space-between;
    margin: 10px 0 20px 0;
  }

  .navigation {
    display: none;
  }

  a,
  a:visited {
    color: var(--text-main);
  }

  @media (min-width: $breakpoint-main) {
    .article {
      display: grid;
      grid-template-columns: 30% 70%;
    }

    .navigation {
      display: block;
      grid-column: 1;
      color: var(--text-main);
      font-size: 1rem;
      position: sticky;
      top: 0px;
      height: 100vh;
    }

    .content {
      grid-column: 2;
    }

    ul {
      margin-left: 20px;
      position: relative;

      li {
        position: relative;
      }
    }
    #div {
      position: absolute;
      content: '';
      top: var(--tab-pos);
      left: -10px;
      bottom: 0;
      width: 4px;
      height: var(--tab-height);
      background: var(--gradient);
      transform-origin: top;
      // transform: translateY(var(--tab-pos));
      transition: top ease 0.25s;
    }
    .tab {
      padding: 0.4em 0;
      margin: 1em 0;

      &:first-of-type {
        margin-top: 0;
      }
    }
  }
</style>
