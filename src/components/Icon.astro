---
interface Props {
  href: string
  translate: 'true' | 'false'
}

const { href, translate } = Astro.props
---

<a class='icon-wrapper' href={href} target='_blank' data-translate={translate}>
  <slot />
</a>
<script>
  // Astro should allow this entire script to run once
  // https://docs.astro.build/en/guides/client-side-scripts/#script-processing

  import { createLinearGradient } from '@util'

  // Get all icons included in the AsideSVG component
  const icons = Array.from(
    // eslint-disable-next-line no-undef
    document.getElementsByClassName('aside-social') as HTMLCollectionOf<HTMLElement>
  )

  icons.forEach((icon, index) => {
    // Add linear gradient to <defs> definition tag
    const gradientID = 'gradient-' + index // each svg's gradient needs a unique id
    const defsElement = document.createElementNS('http://www.w3.org/2000/svg', 'defs')
    const linearGradient = createLinearGradient(icon, index, gradientID)
    defsElement.append(linearGradient)

    // Add <defs> tag to icon svg
    icon.insertBefore(defsElement, icon.firstElementChild)

    // Dynamically choose prefix, dependent on how the svg is written
    let prefix: 'fill' | 'stroke'
    getComputedStyle(icon).getPropertyValue('stroke-width') === '0px'
      ? // Apply to fill (Spotify, X/Twitter, Discord)
        (prefix = 'fill')
      : // Apply to stroke (Instagram, Github, LinkedIn)
        (prefix = 'stroke')

    icon.id = 'icon-' + index

    const hoverStyles = document.createElement('style')

    hoverStyles.innerHTML = `
      #${icon.id} {
        ${prefix}: url(#${gradientID});
      }

      #${icon.id} stop {
        transition: stop-color 0.25s ease;
      }

      .icon-wrapper:hover #${icon.id} stop:first-child {
        stop-color: var(--gradient-start);
      }

      .icon-wrapper:hover #${icon.id} stop:last-child {
        stop-color: var(--gradient-end);
      }
    `

    icon.appendChild(hoverStyles)
  })
</script>
<style>
  .icon-wrapper {
    display: inline-block;
    padding: 0.2em;
    transition: transform 0.25s ease;
  }

  .icon-wrapper[data-translate='true']:hover {
    transition: transform 0.3s ease;
    transform: translateX(-3px);
  }
</style>
