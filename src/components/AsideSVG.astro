<slot />
<script>
  import { getGradient } from '@util'

  const icons = Array.from(
    // eslint-disable-next-line no-undef
    document.getElementsByClassName('aside-social') as HTMLCollectionOf<HTMLElement>
  )
  const [color1, color2] = getGradient()

  const id = 'gradient'
  icons.forEach((icon) => {
    const defsElement = document.createElementNS('http://www.w3.org/2000/svg', 'defs')

    const linearGradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient')
    linearGradient.setAttribute('id', id)
    linearGradient.setAttribute('x1', '100%')
    linearGradient.setAttribute('y1', '0%')
    linearGradient.setAttribute('x2', '0%')
    linearGradient.setAttribute('y2', '100%')

    const stop1 = document.createElementNS('http://www.w3.org/2000/svg', 'stop')
    stop1.setAttribute('offset', '0%')
    stop1.setAttribute('style', `stop-color: ${color1}`)

    const stop2 = document.createElementNS('http://www.w3.org/2000/svg', 'stop')
    stop2.setAttribute('offset', '100%')
    stop2.setAttribute('style', `stop-color: ${color2}`)

    linearGradient.appendChild(stop1)
    linearGradient.appendChild(stop2)

    defsElement.appendChild(linearGradient)

    icon?.insertBefore(defsElement, icon?.firstChild)

    // Apply to either fill or stroke
    const liParent = icon.closest('li')
    if (!liParent) return

    let prefix: 'fill' | 'stroke'
    prefix =
      getComputedStyle(icon).getPropertyValue('stroke-width') === '0px'
        ? // Apply to fill (Spotify, X/Twitter, Discord)
          (prefix = 'fill')
        : // Apply to stroke (Instagram, Github, LinkedIn)
          (prefix = 'stroke')

    const hoverStyles = document.createElement('style')
    hoverStyles.innerHTML = `
        #${liParent.id}:hover svg {
          ${prefix}: url(#${id});
        }
      `
    icon.appendChild(hoverStyles)
  })
</script>
